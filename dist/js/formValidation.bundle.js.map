{"version":3,"file":"js/formValidation.bundle.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2J","sources":["webpack://simple-login-and-register-full-stack-app-ts/webpack/bootstrap","webpack://simple-login-and-register-full-stack-app-ts/webpack/runtime/define property getters","webpack://simple-login-and-register-full-stack-app-ts/webpack/runtime/hasOwnProperty shorthand","webpack://simple-login-and-register-full-stack-app-ts/webpack/runtime/make namespace object","webpack://simple-login-and-register-full-stack-app-ts/./src/ts/utils/form-validation.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const validateEmail = (emailValue, errorMessage, emailInput, label) => {\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!regex.test(emailValue)) {\n        addFieldError(errorMessage, emailInput, \"Email invalido.\", true, label, true);\n        return true;\n    }\n    return false;\n};\nconst validateInputs = (labels, inputs, errorMessages) => {\n    let emptyInput = false;\n    inputs.forEach((input, i) => {\n        const inputElement = input;\n        if (inputElement.value === \"\") {\n            const label = labels[i];\n            const errorMessage = errorMessages[i];\n            addFieldError(errorMessage, inputElement, \"Este campo es obligatorio.\", false, label, false);\n            emptyInput = true;\n        }\n        else {\n            const label = labels[i];\n            const errorMessage = errorMessages[i];\n            removeFieldError(errorMessage, inputElement, label);\n        }\n    });\n    return emptyInput;\n};\nconst validatePasswordLength = (password, errorMessage, input, label) => {\n    if (password.length < 8) {\n        addFieldError(errorMessage, input, \"Logitud de contraseña invalida.\", true, label, true);\n        return true;\n    }\n    return false;\n};\nconst confirmPasswordMatch = (password, confirmPassword, errorMessage, confirmPasswordInput, label) => {\n    if (password !== confirmPassword) {\n        addFieldError(errorMessage, confirmPasswordInput, \"Las contraseñas no coinciden.\", true, label, true);\n        return true;\n    }\n    return false;\n};\nconst validateInput = (inputValue, requiredField, input) => {\n    const labelName = input.id.replace(\"-input\", \"\");\n    const label = document.querySelector(`label[for=\"${labelName}\"]`);\n    if (inputValue === \"\") {\n        requiredField.style.display = \"block\";\n        label.style.color = \"#9A0000\";\n        input.style.outlineColor = \"#9A0000\";\n        input.style.borderColor = \"#9A0000\";\n        return true;\n    }\n    else {\n        requiredField.style.display = \"\";\n    }\n    return false;\n};\nconst addFieldError = (errorMessage, input, message, isBold, label, isFocused) => {\n    if (isBold) {\n        errorMessage.style.fontWeight = \"600\";\n    }\n    else {\n        errorMessage.style.fontWeight = \"500\";\n    }\n    errorMessage.textContent = message;\n    errorMessage.classList.add(\"visible\");\n    if (isFocused)\n        input.focus();\n    label.style.color = \"#9A0000\";\n    input.style.outlineColor = \"#9A0000\";\n    input.style.borderColor = \"#9A0000\";\n};\nconst removeFieldsError = (errorMessages, inputs, labels, globalError) => {\n    console.log(\"removeFieldsError\");\n    inputs.forEach((input, i) => {\n        const label = labels[i];\n        const errorMessage = errorMessages[i];\n        const inputElement = inputs[i];\n        errorMessage.textContent = \"\";\n        errorMessage.classList.remove(\"visible\");\n        label.style.color = \"\";\n        inputElement.style.outlineColor = \"\";\n        inputElement.style.borderColor = \"\";\n    });\n    globalError.textContent = \"\";\n    globalError.classList.remove(\"visible\");\n};\nconst removeFieldError = (errorMessage, input, label) => {\n    errorMessage.textContent = \"\";\n    errorMessage.classList.remove(\"visible\");\n    label.style.color = \"\";\n    input.style.outlineColor = \"\";\n    input.style.borderColor = \"\";\n};\nexport { validateEmail, validateInputs, validatePasswordLength, confirmPasswordMatch, validateInput, addFieldError, removeFieldsError, removeFieldError, };\n"],"names":[],"sourceRoot":""}