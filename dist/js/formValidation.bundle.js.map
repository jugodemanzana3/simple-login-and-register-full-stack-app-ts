{"version":3,"file":"js/formValidation.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmF;;;;;;;UCrCnF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACNmE;AACnE;AACA;AACA;AACA,gDAAgD,sDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sDAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,sDAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sDAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sDAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAW;AAC1C;AACA;AACA,wBAAwB,8CAAM;AAC9B,+BAA+B,8CAAM;AACrC,8BAA8B,8CAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mDAAW;AACjD;AACA;AACA;AACA,KAAK;AACL;AACA,iCAAiC,mDAAW;AAC5C;AACA;AACA;AACA,kCAAkC,mDAAW;AAC7C;AACA;AACA;AACA;AAC2J","sources":["webpack://simple-auth-app-client-ts/./src/ts/constants.ts","webpack://simple-auth-app-client-ts/webpack/bootstrap","webpack://simple-auth-app-client-ts/webpack/runtime/define property getters","webpack://simple-auth-app-client-ts/webpack/runtime/hasOwnProperty shorthand","webpack://simple-auth-app-client-ts/webpack/runtime/make namespace object","webpack://simple-auth-app-client-ts/./src/ts/utils/form-validation.ts"],"sourcesContent":["const ERROR_MESSAGES = {\n    invalidMail: \"Correo invalido.\",\n    requiredField: \"Este campo es obligatorio.\",\n    internetError: \"No tienes conexion a internet\",\n    invalidPasswordLength: \"Logitud de contraseña invalida.\",\n    passwordNotMath: \"Las contraseñas no coinciden.\",\n};\nconst PAGES = {\n    myAccount: \"my-account\",\n    login: \"login\",\n    forgotPassword: \"forgot-password\",\n};\nconst CSS_CLASSES = {\n    loading: \"loading\",\n    visible: \"visible\",\n};\nconst SUCCESS_MESSAGES = {};\nconst SELECTORS = {\n    confirmPasswordInput: \"#confirm-password-input\",\n    nameInput: \"#name-input\",\n    logoutButton: \".logout-button\",\n    userName: \".user-name\",\n    label: \".label\",\n    input: \".input\",\n    alerMessage: \".alert-message\",\n    emailLabel: \"#email-label\",\n    emailInput: \"#email-input\",\n    passwordInput: \"#password-input\",\n    errorMessage: \".error-message\",\n    submitButton: \".submit-button\",\n    form: \".form\",\n    eyeIcon: \".eye-icon\",\n    eyeOffIcon: \".eye-off-icon\",\n};\nconst COLORS = {\n    red: \"#9A0000\"\n};\nexport { ERROR_MESSAGES, PAGES, CSS_CLASSES, SUCCESS_MESSAGES, SELECTORS, COLORS };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { CSS_CLASSES, ERROR_MESSAGES, COLORS } from \"../constants\";\nconst validateEmail = (emailValue, errorMessage, emailInput, label) => {\n    const REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!REGEX.test(emailValue)) {\n        addFieldError(errorMessage, emailInput, ERROR_MESSAGES.invalidMail, true, label, true);\n        return true;\n    }\n    return false;\n};\nconst validateInputs = (labels, inputs, errorMessages) => {\n    let emptyInput = false;\n    inputs.forEach((input, i) => {\n        const inputElement = input;\n        if (inputElement.value === \"\") {\n            const label = labels[i];\n            const errorMessage = errorMessages[i];\n            addFieldError(errorMessage, inputElement, ERROR_MESSAGES.requiredField, false, label, false);\n            emptyInput = true;\n        }\n        else {\n            const label = labels[i];\n            const errorMessage = errorMessages[i];\n            removeFieldError(errorMessage, inputElement, label);\n        }\n    });\n    return emptyInput;\n};\nconst validatePasswordLength = (password, errorMessage, input, label) => {\n    if (password.length < 8) {\n        addFieldError(errorMessage, input, ERROR_MESSAGES.invalidPasswordLength, true, label, true);\n        return true;\n    }\n    return false;\n};\nconst confirmPasswordMatch = (password, confirmPassword, errorMessage, confirmPasswordInput, label) => {\n    if (password !== confirmPassword) {\n        addFieldError(errorMessage, confirmPasswordInput, ERROR_MESSAGES.passwordNotMath, true, label, true);\n        return true;\n    }\n    return false;\n};\nconst validateInput = (inputValue, errorMessage, input, label) => {\n    if (inputValue === \"\") {\n        addFieldError(errorMessage, input, ERROR_MESSAGES.requiredField, false, label, false);\n        return true;\n    }\n    return false;\n};\nconst addFieldError = (errorMessage, input, message, isBold, label, isFocused) => {\n    if (isBold) {\n        errorMessage.style.fontWeight = \"600\";\n    }\n    else {\n        errorMessage.style.fontWeight = \"500\";\n    }\n    errorMessage.textContent = message;\n    errorMessage.classList.add(CSS_CLASSES.visible);\n    if (isFocused)\n        input.focus();\n    label.style.color = COLORS.red;\n    input.style.outlineColor = COLORS.red;\n    input.style.borderColor = COLORS.red;\n};\nconst removeFieldsError = (errorMessages, inputs, labels, globalError) => {\n    inputs.forEach((input, i) => {\n        const label = labels[i];\n        const errorMessage = errorMessages[i];\n        const inputElement = input;\n        errorMessage.textContent = \"\";\n        errorMessage.classList.remove(CSS_CLASSES.visible);\n        label.style.color = \"\";\n        inputElement.style.outlineColor = \"\";\n        inputElement.style.borderColor = \"\";\n    });\n    globalError.textContent = \"\";\n    globalError.classList.remove(CSS_CLASSES.visible);\n};\nconst removeFieldError = (errorMessage, input, label) => {\n    errorMessage.textContent = \"\";\n    errorMessage.classList.remove(CSS_CLASSES.visible);\n    label.style.color = \"\";\n    input.style.outlineColor = \"\";\n    input.style.borderColor = \"\";\n};\nexport { validateEmail, validateInputs, validatePasswordLength, confirmPasswordMatch, validateInput, addFieldError, removeFieldsError, removeFieldError, };\n"],"names":[],"sourceRoot":""}